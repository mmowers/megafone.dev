<?php

/**
 * Implements hook_permission().
 */
function megapost_permission() {
  return array(
    'configure global megapost settings' => array(
      'title' => 'Configure global MegaPost settings',
      'warning' => 'Warning: Give to trusted roles only;',
    ),
    'configure own megapost connections' => array(
      'title' => 'Configure own MegaPost Connections',
    ),
  );
}

/**
 * Implements hook_help().
 */
function megapost_help($path, $arg) {
  switch ($path) {
    case 'admin/help#megapost':
      return t('This module allows you to automatically post content to selected websites');
  }
}

/**
 * Implements hook_menu().
 */
function megapost_menu() {

  $items['admin/config/system/megapost'] = array(
    'title' => t('Configure MegaPost'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('megapost_config_form'),
    'access arguments' => array('configure global megapost settings'),
    'description' => 'Configure MegaPost website connections.',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['megapost_facebook_callback'] = array(
    'title' => t('Callback for facebook with MegaPost'),
    'page callback' => 'megapost_facebook_callback_func',
	  'access arguments' => array('configure own megapost connections'),
    //do i need arguments or is the code just stored in $_REQUEST['code']? commenting for now
    //'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['megapost_twitter_callback'] = array(
    'title' => t('Callback for twitter with MegaPost'),
    'page callback' => 'megapost_twitter_callback_func',
    'access arguments' => array('configure own megapost connections'),
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/edit/facebook'] = array(
    'title' => 'Facebook account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('megapost_facebook_user_form', 1),
    'access arguments' => array('configure own megapost connections'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/edit/twitter'] = array(
    'title' => 'Twitter account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('megapost_twitter_user_form', 1),
    'access arguments' => array('configure own megapost connections'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Form for admin/config/system/megapost.
 */
function megapost_config_form($form, &$form_state) {
  //what is the following element? Does it work?
  $form['megapost_markup'] = array(
    '#markup' => l('About', 'admin/help/megapost'),
  );
  $form['megapost_facebook_app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook App ID/API key'),
    '#default_value' => variable_get('megapost_facebook_app_id', NULL),
    '#description' => t('Enter App ID of your facebook app.'),
    '#required' => TRUE,
  );
  $form['megapost_facebook_app_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook App Secret'),
    '#default_value' => variable_get('megapost_facebook_app_secret', NULL),
    '#description' => t('Enter App Secret of your facebook app.'),
    '#required' => TRUE,
  );
  $form['megapost_twitter_consumer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter Consumer Key'),
    '#default_value' => variable_get('megapost_twitter_consumer_key', NULL),
    '#description' => t('Enter consumer key of your twitter app.'),
    '#required' => TRUE,
  );
  $form['megapost_twitter_consumer_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter Consumer Secret'),
    '#default_value' => variable_get('megapost_twitter_consumer_secret', NULL),
    '#description' => t('Enter consumer secret of your twitter app.'),
    '#required' => TRUE,
  );
  $form['megapost_config_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
    '#submit' => array('megapost_config_form_submit'),
  );
  return $form;
}
/**
 * Submit function for megapost_config_form.
 */
function megapost_config_form_submit(&$form, $form_state) {
  variable_set('megapost_facebook_app_id', $form_state['values']['megapost_facebook_app_id']);
  variable_set('megapost_facebook_app_secret', $form_state['values']['megapost_facebook_app_secret']);
  variable_set('megapost_twitter_consumer_key', $form_state['values']['megapost_twitter_consumer_key']);
  variable_set('megapost_twitter_consumer_secret', $form_state['values']['megapost_twitter_consumer_secret']);
  drupal_set_message(t('Configuration saved.'), 'status');
  drupal_goto('admin/config');
}




/*********************FACEBOOK SECTION*******************************/
/**
 * Form for user/%user/edit/facebook.
 */
function megapost_facebook_user_form($form, &$form_state, $user){
  $form['#uid'] = $user->uid;
  $result = db_query("SELECT page_url
                      FROM {megapost_facebook}
                      WHERE uid = :uid",
                      array(':uid' => $user->uid,
                    ))->fetch();
  $default_url = NULL;
  //$form['#user_already_entered'] = FALSE;
  if(!empty($result)){
    $default_url = $result->page_url;
    //$form['#user_already_entered'] = TRUE;
  }
  $form['megapost_facebook_page_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook Page url'),
    '#default_value' => $default_url,
    '#description' => t('Enter the url of the facebook page. (Requires page administrative rights.)<p>The url should be in format <em>http://www.facebook.com/[name]</em> or <em>http://www.facebook.com/pages/[name]/[id]</em>'),
    '#required' => TRUE,
  );
  $form['megapost_facebook_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
    '#submit' => array('megapost_facebook_user_form_submit'),
  );
  return $form;
  
}
//should have a validate function here i think
/**
 * Submit function for megapost_facebook_user_form
 */
 
function megapost_facebook_user_form_submit(&$form, $form_state) {
  $testvar = 0;
  $megapost_facebook_page_url =  $form_state['values']['megapost_facebook_page_url'];
  //variable_set('megapost_facebook_page_url', $megapost_facebook_page_url);
  
  //get the facebook pageid from the page url  
  $megapost_facebook_page_url_array = explode('/', $megapost_facebook_page_url);
  if (in_array('pages', $megapost_facebook_page_url_array)) {
    $megapost_facebook_pageid = $megapost_facebook_page_array['5'];
    //variable_set('megapost_facebook_pageid', $megapost_facebook_page_array['5']);
  }
  else {
    $facebook_graph_url = str_replace('www', 'graph', $megapost_facebook_page_url);
    $facebook_request_value = drupal_http_request($facebook_graph_url);
    $facebook_returned_value = json_decode($facebook_request_value->data, TRUE);
    if ($facebook_request_value->code == 200) {
      $megapost_facebook_pageid = $facebook_returned_value['id'];
      //variable_set('megapost_facebook_pageid', $facebook_returned_value['id']);
    }
	  else {
	    watchdog('megapost', 'Message: :msg<br />Type: :type<br />Code: :code<br />User: :uid', array(':msg' => $returned_value['error']['message'], 
	    'type' => $returned_value['error']['type'], ':code' => $returned_value['error']['code']), WATCHDOG_ERROR);
      //perhaps i should do more than just return here? like form_set_error
      return;
	  }
  }
  //first update or insert into the table the page url and page id. using the "upsert"
  //function db_merge and commenting out the update and insert functions below.
  db_merge('megapost_facebook')
    ->key(array('uid' => $form['#uid']))
    ->fields(array(
        'page_url' => $megapost_facebook_page_url,
        'page_id' => $megapost_facebook_pageid,
    ))
    ->execute();
  /*if($form['#user_already_entered']){
    $num_updated = db_update('megapost_facebook')
      ->fields(array(
        'page_url' => $megapost_facebook_page_url,
        'page_id' => $megapost_facebook_pageid,
      ))
      ->condition('uid', $form['#uid'], '==')
      ->execute();        
  }
  else{
    $mfid = db_insert('megapost_facebook')
      ->fields(array(
        'page_url' => $megapost_facebook_page_url,
        'page_id' => $megapost_facebook_pageid,
      ))
      ->execute();        
  }*/
  
  
  //start process of authorizing and getting access tokens from facebook
  $app_id = variable_get('megapost_facebook_app_id', NULL);
  $megapost_facebook_callback_url = url('megapost_facebook_callback', array('absolute' => TRUE));
  $query = array(
    'client_id' => $app_id,
	  'redirect_uri' => $megapost_facebook_callback_url,
	  'scope' => 'publish_stream,manage_pages',
  );
  $facebook_url = url("https://www.facebook.com/dialog/oauth", array('query' => $query));
  drupal_goto($facebook_url);
  //facebook should now be redirected to /megabost_facebook_callback with $_REQUEST['code']. This is handled in megapost_facebook_callback()
}

function megapost_facebook_callback_func() {
  global $user;//hmm this means i've switched from passing the user through as an argument to using the global user.
  $code = $_REQUEST['code'];
  $app_id = variable_get('megapost_facebook_app_id', NULL);
  $app_secret = variable_get('megapost_facebook_app_secret', NULL);
  $query = array(
    'client_id' => $app_id,
	  'client_secret' => $app_secret,
	  //why do we set this function as the redirect_uri? Does that form a loop?
	  'redirect_uri' => url('megapost_facebook_callback', array('absolute' => TRUE)),
	  'code' => $code,
  );
  $url = url("https://graph.facebook.com/oauth/access_token", array('query' => $query));
  $request_value = drupal_http_request($url);
  parse_str($request_value->data, $return_value);

  //if facebook returns our request for the access token, save it as megapost_facebook_user_token and use it to get the page token
  if ($request_value->code == 200) {
	  $access_token = $return_value['access_token'];
	  //variable_set('megapost_facebook_user_token', $access_token);
    $f_page_id_list = array();
    $request_user_details = drupal_http_request('https://graph.facebook.com/me?access_token=' . $access_token);
    $returned_user_values = json_decode($request_user_details->data, TRUE);
    $request_account_details = drupal_http_request('https://graph.facebook.com/' . $returned_user_values['id'] . '/accounts?access_token=' . $access_token);
    $returned_account_values = json_decode($request_account_details->data, TRUE);
    $result = db_query("SELECT page_id, page_url
                        FROM {megapost_facebook}
                        WHERE uid = :uid",
                        array(':uid' => $user->uid,
                      ))->fetch();
    foreach ($returned_account_values['data'] as $f_page) {
	    $f_page_id_list[] = $f_page['id'];
	    if ($f_page['id'] == $result->page_id) {
	    //if ($f_page['id'] == variable_get('megapost_facebook_pageid', NULL)) {
	      //variable_set('megapost_facebook_page_token', $f_page['access_token']);
        $num_updated = db_update('megapost_facebook')
          ->fields(array(
            'user_token' => $access_token,
            'page_token' => $f_page['access_token'],
          ))
          ->condition('uid', $user->uid, '=')
          ->execute();
		    
        drupal_set_message(t('Configuration saved.'), 'status');
	    }
	  }
    
    if (!in_array($result->page_id, $f_page_id_list)) {
    //if (!in_array(variable_get('megapost_facebook_pageid', NULL), $f_page_id_list)) {
	    drupal_set_message(t('It seems you are not the admin of !page. To post to this page, you need to have the administrative rights. 
	    Kindly contact the page administrator for permissions.', array('!page' => l($result->page_url, $result->page_url))), 'warning');
	    //Kindly contact the page administrator for permissions.', array('!page' => l(variable_get('megapost_facebook_page_url', NULL), variable_get('megapost_facebook_page_url', NULL)))), 'warning');
	    //variable_del('megapost_facebook_page_url');	  
	  }
	}
	else {
	$returned_value = json_decode($request_value->data, TRUE);
	  watchdog('megapost', 'Message: :msg<br />Type: :type<br />Code: :code<br />User: :uid', array(':msg' => $return_value['error']['message'], 'type' => $return_value['error']['type'], ':code' => $return_value['error']['code']), WATCHDOG_ERROR);
	}
	
  drupal_goto('user');
}
/****************************END FACEBOOK SECTION************************************
****************************************************************************************
****************************************************************************************
****************************************************************************************
****************************************************************************************/
/****************************TWITTER SECTION********************************************/
/**
 * Form for user/%user/edit/twitter.
 */
function megapost_twitter_user_form($form, &$form_state, $user){
  $form['#uid'] = $user->uid;
  $result = db_query("SELECT access_token
                      FROM {megapost_twitter}
                      WHERE uid = :uid",
                      array(':uid' => $user->uid,
                    ))->fetch();
  if(!empty($result)){
    $form['megapost_twitter_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Reconfigure'),
      '#submit' => array('megapost_twitter_user_form_submit'),
    );

  }
  else{
    $form['megapost_twitter_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Configure'),
      '#submit' => array('megapost_twitter_user_form_submit'),
    );

  }
  return $form;
  
}
//should have a validate function here i think
/**
 * Submit function for megapost_twitter_user_form
 */
 
function megapost_twitter_user_form_submit(&$form, $form_state) {
  $testvar = 0;
  require 'tmhOAuth/tmhOAuth.php';
  require 'tmhOAuth/tmhUtilities.php';
  //start process of authorizing and getting access tokens from twitter
  $tmhOAuth = new tmhOAuth(array(
    'consumer_key' => variable_get('megapost_twitter_consumer_key', NULL),
    'consumer_secret' => variable_get('megapost_twitter_consumer_secret', NULL),
  ));
  $wtf = tmhUtilities::php_self();
  $wtf2 = url('megapost_twitter_callback', array('absolute' => TRUE));
  $code = $tmhOAuth->request(
    'POST',
    $tmhOAuth->url('oauth/request_token', ''),
    array(
      //'oauth_callback' => tmhUtilities::php_self(),
      'oauth_callback' => url('megapost_twitter_callback', array('absolute' => TRUE)),
    )
  );

  if ($code == 200) {
    $_SESSION['oauth'] = $tmhOAuth->extract_params($tmhOAuth->response['response']);
    $authurl = $tmhOAuth->url("oauth/authorize", '') .  "?oauth_token={$_SESSION['oauth']['oauth_token']}";
    drupal_goto($authurl);
    //header("Location: {$authurl}");

    //authorize($tmhOAuth);
  } else {
    outputError($tmhOAuth);
  }
  /*$megapost_twitter_callback_url = url('megapost_twitter_callback', array('absolute' => TRUE));
  $headers = array('Content-Type' => 'application/x-www-form-urlencoded');
  $data = array(
    'consumer_key' => $consumer_key,
    'oauth_callback' => $megapost_twitter_callback_url,
  );
  $twitter_url = "https://api.twitter.com/oauth/request_token";
  $request_value = drupal_http_request($twitter_url, $headers, 'POST', http_build_query($data));
   * 
   */
}
function outputError($tmhOAuth) {
  return 'There was an error: ' . $tmhOAuth->response['response'];
}


function megapost_twitter_callback_func() {
  global $user;
  //drupal_set_message('we made it!');  
  //now to get the permanent token
  //this shit must happen again. DRY would say put this in a function
  require 'tmhOAuth/tmhOAuth.php';
  require 'tmhOAuth/tmhUtilities.php';
  $tmhOAuth = new tmhOAuth(array(
    'consumer_key' => variable_get('megapost_twitter_consumer_key', NULL),
    'consumer_secret' => variable_get('megapost_twitter_consumer_secret', NULL),
  ));
  $tmhOAuth->config['user_token'] = $_SESSION['oauth']['oauth_token'];
  $tmhOAuth->config['user_secret'] = $_SESSION['oauth']['oauth_token_secret'];

  $code = $tmhOAuth->request(
    'POST',
    $tmhOAuth->url('oauth/access_token', ''),
    array(
      'oauth_verifier' => $_REQUEST['oauth_verifier']
    )
  );

  if ($code == 200) {
    $access_array = $tmhOAuth->extract_params($tmhOAuth->response['response']);
    //drupal_set_message("great! PERMANENT ACCESS TOKEN= ".print_r($access_array, TRUE)." TEMP ACCESS TOKEN= ".print_r($_SESSION['oauth'], TRUE));
    unset($_SESSION['oauth']);
    //using the "upsert" function db_merge. update if the user exists, insert if it does not.
    db_merge('megapost_twitter')
      ->key(array('uid' => $user->uid))
      ->fields(array(
          'access_token' => $access_array['oauth_token'],
          'token_secret' => $access_array['oauth_token_secret'],
      ))
      ->execute();
    drupal_goto('user');
  } else {
    //drupal_set_message('shit! error: '. outputError($tmhOAuth));
    drupal_goto(tmhUtilities::php_self());
  }
}

/****************************END TWITTER SECTION************************************
****************************************************************************************
****************************************************************************************
****************************************************************************************
****************************************************************************************/




/**
 * Implements hook_node_insert().
 * 
 */

function megapost_node_insert($node_reduced) {
  global $base_url;
  //$node = node_load($node_incomplete->nid);
  if(!empty($node_reduced->field_actions['und'])){
    global $user;
    foreach($node_reduced->field_actions['und'] as $val){
      if($val['tid'] == 1){
        //tid=1 this means we are posting to facebook
        $result = db_query("SELECT page_id, page_token
                            FROM {megapost_facebook}
                            WHERE uid = :uid",
                            array(':uid' => $user->uid,
                          ))->fetch();
        if(!empty($result)){
          //$page_id = variable_get('megapost_facebook_pageid', NULL);
          $url = "https://graph.facebook.com/$result->page_id/feed";
          $node = node_load($node_reduced->nid); //needed to access image url
          $pic = NULL;
          if (array_key_exists('und', $node->field_image)){
            $pic = file_create_url($node->field_image['und'][0]['uri']);            
          }
            
          $data = array(
            'access_token' => $result->page_token,
            //'access_token' => variable_get('megapost_facebook_page_token', NULL),
            'message' => $node->body['und'][0]['value'],
            'picture' => $pic,
            //'link' => $base_url.'/node/'.$node->nid,
            //'name' => NULL,
            //'caption' => NULL,
            //'description' => NULL,
          );

          //$ch = curl_init();
          //curl_setopt($ch, CURLOPT_URL, $url);
          //curl_setopt($ch, CURLOPT_HEADER, false);
          //curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          //curl_setopt($ch, CURLOPT_POST, true);
          //curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
          //$response = curl_exec($ch);
          //$content = json_decode($response, TRUE);
          //if (is_array($content) && array_key_exists('error', $content)){
          //  watchdog('megapost', 'Message: :msg<br />Type: :type<br />Code: :code<br />User: :uid', array(':msg' => $content['error']['message'], 'type' => $content['error']['type'], ':code' => $content['error']['code']), WATCHDOG_ERROR);
          //}

          $response = drupal_http_request($url, array('data' => http_build_query($data), 'method' => 'POST'));
          if ($response->code != 200) {
            $content = json_decode($response->data, TRUE);
            watchdog('megapost', 'Message: :msg<br />Type: :type<br />Code: :code<br />User: :uid', array(':msg' => $content['error']['message'], 'type' => $content['error']['type'], ':code' => $content['error']['code']), WATCHDOG_ERROR);
          }
          
        }
 

        //return FALSE;
      }
      elseif($val['tid'] == 2){
        //tid=2 means we are posting to twitter
        $result = db_query("SELECT access_token, token_secret
                            FROM {megapost_twitter}
                            WHERE uid = :uid",
                            array(':uid' => $user->uid,
                          ))->fetch();
        if(!empty($result)){
          require 'tmhOAuth/tmhOAuth.php';
          require 'tmhOAuth/tmhUtilities.php';

          $tmhOAuth = new tmhOAuth(array(
            'consumer_key'    => variable_get('megapost_twitter_consumer_key', NULL),
            'consumer_secret' => variable_get('megapost_twitter_consumer_secret', NULL),
            'user_token'      => $result->access_token,
            'user_secret'     => $result->token_secret,
          ));

          $node = node_load($node_reduced->nid); //needed to access image url
          if (array_key_exists('und', $node->field_image)){
            $img_url = file_create_url($node->field_image['und'][0]['uri']);            
          } 
          else{
            return $this->statuses_update($status);            
          }

          $image = file_get_contents($img_url);

          $code = $tmhOAuth->request(
            'POST',
            'https://api.twitter.com/1.1/statuses/update_with_media.json',
            array(
              'media[]' => $image,
              'status'  => $node->body['und'][0]['value'],
            ),
            true, // use auth
            true  // multipart
          );

          echo $code;

          if ($code == 200) {
            tmhUtilities::pr(json_decode($tmhOAuth->response['response']));
          } else {
            tmhUtilities::pr($tmhOAuth->response['response']);
          }
          
        }        
      }
    }
  }
}


/*function megapost_node_delete($node) {
  $testvar = 1;
  if(!empty($node->field_actions['und'])){
    foreach($node->field_actions['und'] as $val){
      if($val['tid'] == 1){
        //this means we posted to facebook
        //I need to save facebook object id in the node to use here
        $oid =
        $url = "https://graph.facebook.com/$oid";

        $data = array(
          'access_token' => variable_get('megapost_facebook_page_token', NULL),
          );
        $response = drupal_http_request($url, array('data' => http_build_query($data), 'method' => 'DELETE'));
        if ($response->code != 200) {
          $content = json_decode($response->data, TRUE);
          watchdog('megapost', 'Message: :msg<br />Type: :type<br />Code: :code<br />User: :uid', array(':msg' => $content['error']['message'], 'type' => $content['error']['type'], ':code' => $content['error']['code']), WATCHDOG_ERROR);
        }


        //return FALSE;
      }
    }
  }
}*/
