<?php

/**
 * Implements hook_permission().
 */
function megapost_permission() {
  return array(
    'configure global megapost settings' => array(
      'title' => 'Configure global MegaPost settings',
      'warning' => 'Warning: Give to trusted roles only;',
    ),
    'configure own megapost connections' => array(
      'title' => 'Configure own MegaPost Connections',
    ),
  );
}

/**
 * Implements hook_help().
 */
function megapost_help($path, $arg) {
  switch ($path) {
    case 'admin/help#megapost':
      return t('This module allows you to automatically post content to selected websites');
  }
}

/**
 * Implements hook_menu().
 */
function megapost_menu() {

  $items['admin/config/system/megapost'] = array(
    'title' => t('Configure MegaPost'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('megapost_config_form'),
    'access arguments' => array('configure global megapost settings'),
    'description' => 'Configure MegaPost website connections.',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['megapost_facebook_callback'] = array(
    'title' => t('Callback for facebook with MegaPost'),
    'page callback' => 'megapost_facebook_callback_func',
	  'access arguments' => array('configure own megapost connections'),
    //do i need arguments or is the code just stored in $_REQUEST['code']? commenting for now
    //'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['megapost_twitter_callback'] = array(
    'title' => t('Callback for twitter with MegaPost'),
    'page callback' => 'megapost_twitter_callback_func',
    'access arguments' => array('configure own megapost connections'),
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/connections'] = array(
    'title' => 'Connect megafone to your social media',
    'page callback' => 'connections_page',
    'page arguments' => array(1),
    'access arguments' => array('configure own megapost connections'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%user/facebook'] = array(
    'title' => 'Facebook account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('megapost_facebook_user_form', 1),
    'access arguments' => array('configure own megapost connections'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%user/twitter'] = array(
    'title' => 'Twitter account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('megapost_twitter_user_form', 1),
    'access arguments' => array('configure own megapost connections'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form for admin/config/system/megapost.
 */
function megapost_config_form($form, &$form_state) {
  //what is the following element? Does it work?
  $form['megapost_markup'] = array(
    '#markup' => l('About', 'admin/help/megapost'),
  );
  $form['megapost_facebook_app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook App ID/API key'),
    '#default_value' => variable_get('megapost_facebook_app_id', NULL),
    '#description' => t('Enter App ID of your facebook app.'),
    '#required' => TRUE,
  );
  $form['megapost_facebook_app_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook App Secret'),
    '#default_value' => variable_get('megapost_facebook_app_secret', NULL),
    '#description' => t('Enter App Secret of your facebook app.'),
    '#required' => TRUE,
  );
  $form['megapost_twitter_consumer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter Consumer Key'),
    '#default_value' => variable_get('megapost_twitter_consumer_key', NULL),
    '#description' => t('Enter consumer key of your twitter app.'),
    '#required' => TRUE,
  );
  $form['megapost_twitter_consumer_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter Consumer Secret'),
    '#default_value' => variable_get('megapost_twitter_consumer_secret', NULL),
    '#description' => t('Enter consumer secret of your twitter app.'),
    '#required' => TRUE,
  );
  $form['megapost_config_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
    '#submit' => array('megapost_config_form_submit'),
  );
  return $form;
}
/**
 * Submit function for megapost_config_form.
 */
function megapost_config_form_submit(&$form, $form_state) {
  variable_set('megapost_facebook_app_id', $form_state['values']['megapost_facebook_app_id']);
  variable_set('megapost_facebook_app_secret', $form_state['values']['megapost_facebook_app_secret']);
  variable_set('megapost_twitter_consumer_key', $form_state['values']['megapost_twitter_consumer_key']);
  variable_set('megapost_twitter_consumer_secret', $form_state['values']['megapost_twitter_consumer_secret']);
  drupal_set_message(t('Configuration saved.'), 'status');
  drupal_goto('admin/config');
}

function connections_page($user) {
  if (!is_object($user) || !$user->uid) {
    return MENU_NOT_FOUND;
  }
  

  //facebook
  $result = db_query("SELECT page_token, page_url
                      FROM {megapost_facebook}
                      WHERE uid = :uid",
                      array(':uid' => $user->uid,
                    ))->fetch();
  if(!empty($result->page_token) && !empty($result->page_url)){
    $fbtext = '(connected)';
    $fbconfig = 'Re-configure';
    $fbicon = '/misc/message-24-ok.png';
  }
  else{
    $fbtext = '(not connected)';
    $fbconfig = 'Connect';
    $fbicon = '/misc/message-24-error.png';
  }
  
  //twitter
  $result = db_query("SELECT access_token
                      FROM {megapost_twitter}
                      WHERE uid = :uid",
                      array(':uid' => $user->uid,
                    ))->fetch();
  if(!empty($result->access_token)){
    $twtext = '(connected)';
    $twconfig = 'Re-configure';
    $twicon = '/misc/message-24-ok.png';   
  }
  else{
    $twtext = '(not connected)';
    $twconfig = 'Connect';
    $twicon = '/misc/message-24-error.png';
  }
  
  
  
  $output = "
    <div class='connections-block'>
      <p><span class='connections-title'>Facebook:</span> <img src='$fbicon'>$fbtext <a href ='/user/$user->uid/facebook'>$fbconfig</a></p>
      <p><span class='connections-title'>Twitter:</span> <img src='$twicon'>$twtext <a href ='/user/$user->uid/twitter'>$twconfig</a></p>
    </div>";

  return $output;
}



/*********************FACEBOOK SECTION*******************************/
/**
 * Form for user/%user/edit/facebook.
 */
function megapost_facebook_user_form($form, &$form_state, $user){
  $form['#uid'] = $user->uid;
  $result = db_query("SELECT page_url, page_token
                      FROM {megapost_facebook}
                      WHERE uid = :uid",
                      array(':uid' => $user->uid,
                    ))->fetch();
  $default_url = NULL;
  //$form['#user_already_entered'] = FALSE;
  if(!empty($result->page_url)){
    $default_url = $result->page_url;
    //$form['#user_already_entered'] = TRUE;
  }
  if(!empty($result->page_token) && !empty($result->page_url)){    
    $prefix = '<strong>'.t('Your facebook account has already been configured. Fill out this form again to reconfigure the account.').'</strong><br><br>';
    $submit_text = t('Reconfigure account');
  }
  else{
    $prefix = '';
    $submit_text = t('Save configuration');
  }
  $prefix2 = t('Please allow all permissions that facebook requests.
    These are required for megafone to function properly. Posts will only be made to facebook
    when you request them. If you experience any issue, double check that you have administrative
    access to the page and log out of facebook before submitting this form.').'<br><br>';
  $form['megapost_facebook_page_url'] = array(
    '#prefix' => $prefix.$prefix2,
    '#type' => 'textfield',
    '#title' => t('Facebook Page url'),
    '#default_value' => $default_url,
    '#description' => t('Enter the url of the facebook page. (Requires page administrative rights.)<p>The url should be in format <em>http://www.facebook.com/[name]</em> or <em>http://www.facebook.com/pages/[name]/[id]</em>'),
    '#required' => TRUE,
  );
  $form['megapost_facebook_submit'] = array(
    '#type' => 'submit',
    '#value' => $submit_text,
    '#submit' => array('megapost_facebook_user_form_submit'),
    //'#description' => t('Your facebook account has already been configured. This will reconfigure your account'), 
  );    
  return $form;
  
}
//should have a validate function here i think
/**
 * Submit function for megapost_facebook_user_form
 */
 
function megapost_facebook_user_form_submit(&$form, $form_state) {
  $megapost_facebook_page_url =  $form_state['values']['megapost_facebook_page_url'];
  //variable_set('megapost_facebook_page_url', $megapost_facebook_page_url);
  
  //get the facebook pageid from the page url  
  $megapost_facebook_page_url_array = explode('/', $megapost_facebook_page_url);
  if (in_array('pages', $megapost_facebook_page_url_array)) {
    $megapost_facebook_pageid = $megapost_facebook_page_array['5'];
    //variable_set('megapost_facebook_pageid', $megapost_facebook_page_array['5']);
  }
  else {
    $facebook_graph_url = str_replace('www', 'graph', $megapost_facebook_page_url);
    $facebook_request_value = drupal_http_request($facebook_graph_url);
    $facebook_returned_value = json_decode($facebook_request_value->data, TRUE);
    if ($facebook_request_value->code == 200) {
      $megapost_facebook_pageid = $facebook_returned_value['id'];
      //variable_set('megapost_facebook_pageid', $facebook_returned_value['id']);
    }
	  else {
      //perhaps i should do more than just return here? like form_set_error
      return;
	  }
  }
  //first update or insert into the table the page url and page id. using the "upsert"
  //function db_merge and commenting out the update and insert functions below.
  db_merge('megapost_facebook')
    ->key(array('uid' => $form['#uid']))
    ->fields(array(
        'page_url' => $megapost_facebook_page_url,
        'page_id' => $megapost_facebook_pageid,
        'user_token' => '',
        'page_token' => '',
    ))
    ->execute();
  /*if($form['#user_already_entered']){
    $num_updated = db_update('megapost_facebook')
      ->fields(array(
        'page_url' => $megapost_facebook_page_url,
        'page_id' => $megapost_facebook_pageid,
      ))
      ->condition('uid', $form['#uid'], '==')
      ->execute();        
  }
  else{
    $mfid = db_insert('megapost_facebook')
      ->fields(array(
        'page_url' => $megapost_facebook_page_url,
        'page_id' => $megapost_facebook_pageid,
      ))
      ->execute();        
  }*/
  
  
  //start process of authorizing and getting access tokens from facebook
  $app_id = variable_get('megapost_facebook_app_id', NULL);
  $megapost_facebook_callback_url = url('megapost_facebook_callback', array('absolute' => TRUE));
  $query = array(
    'client_id' => $app_id,
	  'redirect_uri' => $megapost_facebook_callback_url,
	  'scope' => 'publish_stream,manage_pages,create_event',
  );
  $facebook_url = url("https://www.facebook.com/dialog/oauth", array('query' => $query));
  drupal_goto($facebook_url);
  //facebook should now be redirected to /megabost_facebook_callback with $_REQUEST['code']. This is handled in megapost_facebook_callback()
}

function megapost_facebook_callback_func() {
  global $user;//hmm this means i've switched from passing the user through as an argument to using the global user.
  $code = $_REQUEST['code'];
  $app_id = variable_get('megapost_facebook_app_id', NULL);
  $app_secret = variable_get('megapost_facebook_app_secret', NULL);
  $query = array(
    'client_id' => $app_id,
	  'client_secret' => $app_secret,
	  //why do we set this function as the redirect_uri? Does that form a loop?
	  'redirect_uri' => url('megapost_facebook_callback', array('absolute' => TRUE)),
	  'code' => $code,
  );
  $url = url("https://graph.facebook.com/oauth/access_token", array('query' => $query));
  $request_value = drupal_http_request($url);
  parse_str($request_value->data, $return_value);

  //if facebook returns our request for the access token, save it as megapost_facebook_user_token and use it to get the page token
  if ($request_value->code == 200) {
	  $access_token = $return_value['access_token'];
	  //variable_set('megapost_facebook_user_token', $access_token);
    $f_page_id_list = array();
    $request_user_details = drupal_http_request('https://graph.facebook.com/me?access_token=' . $access_token);
    $returned_user_values = json_decode($request_user_details->data, TRUE);
    $request_account_details = drupal_http_request('https://graph.facebook.com/' . $returned_user_values['id'] . '/accounts?access_token=' . $access_token);
    $returned_account_values = json_decode($request_account_details->data, TRUE);
    $result = db_query("SELECT page_id, page_url
                        FROM {megapost_facebook}
                        WHERE uid = :uid",
                        array(':uid' => $user->uid,
                      ))->fetch();
    foreach ($returned_account_values['data'] as $f_page) {
	    $f_page_id_list[] = $f_page['id'];
	    if ($f_page['id'] == $result->page_id) {
	    //if ($f_page['id'] == variable_get('megapost_facebook_pageid', NULL)) {
	      //variable_set('megapost_facebook_page_token', $f_page['access_token']);
        $num_updated = db_update('megapost_facebook')
          ->fields(array(
            'user_token' => $access_token,
            'page_token' => $f_page['access_token'],
          ))
          ->condition('uid', $user->uid, '=')
          ->execute();
		    
        drupal_set_message(t('Configuration saved.'), 'status');
	    }
	  }
    
    if (!in_array($result->page_id, $f_page_id_list)) {
    //if (!in_array(variable_get('megapost_facebook_pageid', NULL), $f_page_id_list)) {
	    drupal_set_message(t('It seems you are not the admin of !page. To post to this page, you need to have the administrative rights. 
	    Kindly contact the page administrator for permissions.', array('!page' => l($result->page_url, $result->page_url))), 'warning');
	    //Kindly contact the page administrator for permissions.', array('!page' => l(variable_get('megapost_facebook_page_url', NULL), variable_get('megapost_facebook_page_url', NULL)))), 'warning');
	    //variable_del('megapost_facebook_page_url');	  
	  }
	}
	else {
    $returned_value = json_decode($request_value->data, TRUE);
	}
	
  drupal_goto("user/$user->uid/connections");
}
/****************************END FACEBOOK SECTION************************************
****************************************************************************************
****************************************************************************************
****************************************************************************************
****************************************************************************************/
/****************************TWITTER SECTION********************************************/
/**
 * Form for user/%user/edit/twitter.
 */
function megapost_twitter_user_form($form, &$form_state, $user){
  $form['#uid'] = $user->uid;
  $result = db_query("SELECT access_token
                      FROM {megapost_twitter}
                      WHERE uid = :uid",
                      array(':uid' => $user->uid,
                    ))->fetch();
  if(!empty($result)){
    $prefix = '<strong>'.t('Your twitter account has already been configured').'</strong><br><br>';
    $submit_text = t('Reconfigure account');

  }
  else{
    $prefix = '';
    $submit_text = t('Configure account');
  }
  $prefix2 = t('Please allow all permissions that twitter requests.
    These are required for megafone to function properly. Posts will only be made to twitter
    when you request them.').'<br><br>';
  $form['megapost_twitter_submit'] = array(
    '#prefix' => $prefix.$prefix2,
    '#type' => 'submit',
    '#value' => $submit_text,
    '#submit' => array('megapost_twitter_user_form_submit'),
    //'#description' => t('Your twitter account has already been configured. This will reconfigure your account'), 
  );

  return $form;
  
}
//should have a validate function here i think
/**
 * Submit function for megapost_twitter_user_form
 */
 
function megapost_twitter_user_form_submit(&$form, $form_state) {
  $testvar = 0;
  require 'tmhOAuth/tmhOAuth.php';
  require 'tmhOAuth/tmhUtilities.php';
  //start process of authorizing and getting access tokens from twitter
  $tmhOAuth = new tmhOAuth(array(
    'consumer_key' => variable_get('megapost_twitter_consumer_key', NULL),
    'consumer_secret' => variable_get('megapost_twitter_consumer_secret', NULL),
  ));
  $wtf = tmhUtilities::php_self();
  $wtf2 = url('megapost_twitter_callback', array('absolute' => TRUE));
  $code = $tmhOAuth->request(
    'POST',
    $tmhOAuth->url('oauth/request_token', ''),
    array(
      //'oauth_callback' => tmhUtilities::php_self(),
      'oauth_callback' => url('megapost_twitter_callback', array('absolute' => TRUE)),
    )
  );

  if ($code == 200) {
    $_SESSION['oauth'] = $tmhOAuth->extract_params($tmhOAuth->response['response']);
    $authurl = $tmhOAuth->url("oauth/authorize", '') .  "?oauth_token={$_SESSION['oauth']['oauth_token']}";
    drupal_goto($authurl);
    //header("Location: {$authurl}");

    //authorize($tmhOAuth);
  } else {
    outputError($tmhOAuth);
  }
  /*$megapost_twitter_callback_url = url('megapost_twitter_callback', array('absolute' => TRUE));
  $headers = array('Content-Type' => 'application/x-www-form-urlencoded');
  $data = array(
    'consumer_key' => $consumer_key,
    'oauth_callback' => $megapost_twitter_callback_url,
  );
  $twitter_url = "https://api.twitter.com/oauth/request_token";
  $request_value = drupal_http_request($twitter_url, $headers, 'POST', http_build_query($data));
   * 
   */
}
function outputError($tmhOAuth) {
  return 'There was an error: ' . $tmhOAuth->response['response'];
}


function megapost_twitter_callback_func() {
  global $user;
  //drupal_set_message('we made it!');  
  //now to get the permanent token
  //this shit must happen again. DRY would say put this in a function
  require 'tmhOAuth/tmhOAuth.php';
  require 'tmhOAuth/tmhUtilities.php';
  $tmhOAuth = new tmhOAuth(array(
    'consumer_key' => variable_get('megapost_twitter_consumer_key', NULL),
    'consumer_secret' => variable_get('megapost_twitter_consumer_secret', NULL),
  ));
  $tmhOAuth->config['user_token'] = $_SESSION['oauth']['oauth_token'];
  $tmhOAuth->config['user_secret'] = $_SESSION['oauth']['oauth_token_secret'];

  $code = $tmhOAuth->request(
    'POST',
    $tmhOAuth->url('oauth/access_token', ''),
    array(
      'oauth_verifier' => $_REQUEST['oauth_verifier']
    )
  );

  if ($code == 200) {
    $access_array = $tmhOAuth->extract_params($tmhOAuth->response['response']);
    //drupal_set_message("great! PERMANENT ACCESS TOKEN= ".print_r($access_array, TRUE)." TEMP ACCESS TOKEN= ".print_r($_SESSION['oauth'], TRUE));
    unset($_SESSION['oauth']);
    //using the "upsert" function db_merge. update if the user exists, insert if it does not.
    db_merge('megapost_twitter')
      ->key(array('uid' => $user->uid))
      ->fields(array(
          'access_token' => $access_array['oauth_token'],
          'token_secret' => $access_array['oauth_token_secret'],
      ))
      ->execute();
    drupal_goto("user/$user->uid/connections");
  } else {
    //drupal_set_message('shit! error: '. outputError($tmhOAuth));
    drupal_goto(tmhUtilities::php_self());
  }
}

/****************************END TWITTER SECTION************************************
****************************************************************************************
****************************************************************************************
****************************************************************************************
****************************************************************************************/




/**
 * Implements hook_node_insert().
 * 
 */

function megapost_node_insert($node_reduced) {
  global $base_url;
  //$node = node_load($node_incomplete->nid);
  if(!empty($node_reduced->field_actions['und'])){
    global $user;
    foreach($node_reduced->field_actions['und'] as $val){
      if($val['tid'] == 1){
        //tid=1 this means we are posting to facebook
        $result = db_query("SELECT page_id, page_token
                            FROM {megapost_facebook}
                            WHERE uid = :uid",
                            array(':uid' => $user->uid,
                          ))->fetch();
        if(!empty($result)){
          $node = node_load($node_reduced->nid); //needed to access image url
          $pic = NULL;
          $link = NULL;
          if (array_key_exists('und', $node->field_image)){
            $pic = file_create_url($node->field_image['und'][0]['uri']); 
            $link = $base_url.'/node/'.$node->nid;
          }
          if($node->type == 'event'){
            $url = "https://graph.facebook.com/$result->page_id/events";
            $datetime = new DateTime($node->field_date['und'][0]['value']);
            $data = array(
              'access_token' => $result->page_token,
              'name' => $node->title,
              'start_time' => $datetime->format(DateTime::ISO8601),  
              'description' => $node->body['und'][0]['value'],
              'picture' => $pic,
              'link' => $link,
            );    
            
          }
          else{
            $url = "https://graph.facebook.com/$result->page_id/feed";
            $data = array(
              'access_token' => $result->page_token,
              //'access_token' => variable_get('megapost_facebook_page_token', NULL),
              'message' => $node->body['und'][0]['value'],
              'picture' => $pic,
              'link' => $link,
              //'name' => NULL,
              //'caption' => NULL,
              //'description' => NULL,
            );    
          }


          $response = drupal_http_request($url, array('data' => drupal_http_build_query($data), 'method' => 'POST'));
          if ($response->code != 200) {
            $content = json_decode($response->data, TRUE);
            //drupal_set_message("Somthing went wrong content=".print_r($content, TRUE)."   data=".print_r($data, TRUE));
          }
          else{
            //drupal_set_message("data=".print_r($data, TRUE));
          }
          
        }
 

        //return FALSE;
      }
      elseif($val['tid'] == 2){
        //tid=2 means we are posting to twitter
        $result = db_query("SELECT access_token, token_secret
                            FROM {megapost_twitter}
                            WHERE uid = :uid",
                            array(':uid' => $user->uid,
                          ))->fetch();
        if(!empty($result)){
          require 'tmhOAuth/tmhOAuth.php';
          require 'tmhOAuth/tmhUtilities.php';

          $tmhOAuth = new tmhOAuth(array(
            'consumer_key'    => variable_get('megapost_twitter_consumer_key', NULL),
            'consumer_secret' => variable_get('megapost_twitter_consumer_secret', NULL),
            'user_token'      => $result->access_token,
            'user_secret'     => $result->token_secret,
          ));

          $node = node_load($node_reduced->nid); //needed to access image url
          if (array_key_exists('und', $node->field_image)){
            $img_url = file_create_url($node->field_image['und'][0]['uri']);
            $code = $tmhOAuth->request(
              'POST',
              'https://api.twitter.com/1.1/statuses/update_with_media.json',
              array(
                'media[]' => file_get_contents($img_url),
                'status'  => $node->body['und'][0]['value'],
              ),
              true, // use auth
              true  // multipart
            );
          } 
          else{
            $code = $tmhOAuth->request(
              'POST',
              'https://api.twitter.com/1.1/statuses/update.json',
              array(
                'status' => $node->body['und'][0]['value'],
              )
            );           
          }

          if ($code == 200) {
            //drupal_set_message("response=".print_r(json_decode($tmhOAuth->response['response']), TRUE));
            //tmhUtilities::pr(json_decode($tmhOAuth->response['response']));
          } else {
            //drupal_set_message("response=".print_r($tmhOAuth->response['response'], TRUE));
            //tmhUtilities::pr($tmhOAuth->response['response']);          
          }
          
        }        
      }
    }
  }
}


/*function megapost_node_delete($node) {
  $testvar = 1;
  if(!empty($node->field_actions['und'])){
    foreach($node->field_actions['und'] as $val){
      if($val['tid'] == 1){
        //this means we posted to facebook
        //I need to save facebook object id in the node to use here
        $oid =
        $url = "https://graph.facebook.com/$oid";

        $data = array(
          'access_token' => variable_get('megapost_facebook_page_token', NULL),
          );
        $response = drupal_http_request($url, array('data' => http_build_query($data), 'method' => 'DELETE'));
        if ($response->code != 200) {
          $content = json_decode($response->data, TRUE);
        }


        //return FALSE;
      }
    }
  }
}*/


/**
 * Implements hook_user_view_alter().
 * 
 */

function megapost_user_view_alter(&$build) {
  $deleteme = 1;
}

/**
 * Implements hook_user_insert().
 * 
 */
function megapost_user_insert(&$edit, $account, $category) {
  $deleteme = 1;
}

/**
 * Implements hook_user_login().
 * 
 */
function megapost_user_login(&$edit, $account){
  // Your logic will set $redirection to the desired location
  $redirection = "user/$account->uid/connections";

 
// Unless there is already a redirection going, or the user is trying to reset his password, we redirect to $redirection.
  if (empty($_GET['destination'])
    && !is_null($redirection)
    && (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset'))
  {
    $_GET['destination'] = $redirection; // Should we use $edit['redirect'] instead..?
  }
}