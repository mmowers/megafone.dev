<?php

/**
 * Implements hook_permission().
 */
function megapost_permission() {
  return array(
    'megapost_configure' => array(
      'title' => 'Configure MegaPost connections',
      'warning' => 'Warning: Give to trusted roles only;',
    ),
  );
}

/**
 * Implements hook_help().
 */
function megapost_help($path, $arg) {
  switch ($path) {
    case 'admin/help#megapost':
      return t('This module allows you to automatically post content to selected websites');
  }
}

/**
 * Implements hook_menu().
 */
function megapost_menu() {

  $items['admin/config/system/megapost'] = array(
    'title' => t('Configure MegaPost'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('megapost_config_form'),
    'access arguments' => array('megapost_configure'),
    'description' => 'Configure MegaPost website connections.',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['megapost_facebook_callback'] = array(
    'title' => t('Callback for facebook with MegaPost'),
    'page callback' => 'megapost_facebook_callback_func',
	  'access arguments' => array('megapost_configure'),
    //do i need arguments or is the code just stored in $_REQUEST['code']? commenting for now
    //'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Form for admin/config/system/megapost.
 */
function megapost_config_form($form, &$form_state) {
  //what is the following element? Does it work?
  $form['megapost_markup'] = array(
    '#markup' => l('About', 'admin/help/megapost'),
  );
  $form['megapost_facebook_app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook App ID/API key'),
    '#default_value' => variable_get('megapost_facebook_app_id', NULL),
    '#description' => t('Enter App ID of your facebook app.'),
	'#required' => TRUE,
  );
  $form['megapost_facebook_app_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook App Secret'),
    '#default_value' => variable_get('megapost_facebook_app_secret', NULL),
    '#description' => t('Enter App Secret of your facebook app.'),
	'#required' => TRUE,
  );
  /*$form['megapost_facebook_page_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook Page url'),
    '#default_value' => variable_get('megapost_facebook_page_url', NULL),
    '#description' => t('Enter the url of the facebook page. (Requires page administrative rights.)<p>The url should be in format <em>http://www.facebook.com/[name]</em> or <em>http://www.facebook.com/pages/[name]/[id]</em>'),
	//what is the following line about? does it disable this field until the app secret is entered and saved?  why?
	'#disabled' => variable_get('megapost_facebook_app_secret', NULL)!= NULL ? FALSE : TRUE,
	'#required' => TRUE,
  );*/
  $form['megapost_config_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
    '#submit' => array('megapost_config_form_submit'),
  );
  return $form;
}

/**
 * Submit function for megapost_config_form.
 */
function megapost_config_form_submit(&$form, $form_state) {
  $megapost_facebook_app_id = $form_state['values']['megapost_facebook_app_id'];
  $megapost_facebook_app_secret =  $form_state['values']['megapost_facebook_app_secret'];
  
  variable_set('megapost_facebook_app_id', $megapost_facebook_app_id);
  variable_set('megapost_facebook_app_secret', $megapost_facebook_app_secret);
}
/**
 * Implements hook_user_presave
 */
 
function megapost_user_presave(&$edit, $account, $category) {
  $testvar = 0;
  /*
  $megapost_facebook_page_url =  $form_state['values']['megapost_facebook_page_url'];
  variable_set('megapost_facebook_page_url', $megapost_facebook_page_url);
  
  //get the facebook pageid from the page url
  
  $megapost_facebook_page_url_array = explode('/', $megapost_facebook_page_url);
  if (in_array('pages', $megapost_facebook_page_url_array)) {
    variable_set('megapost_facebook_pageid', $megapost_facebook_page_array['5']);
  }
  else {
    $facebook_graph_url = str_replace('www', 'graph', $megapost_facebook_page_url);
    $facebook_request_value = drupal_http_request($facebook_graph_url);
    $facebook_returned_value = json_decode($facebook_request_value->data, TRUE);
      if ($facebook_request_value->code == 200) {
        variable_set('megapost_facebook_pageid', $facebook_returned_value['id']);
      }
	  else {
	    watchdog('megapost', 'Message: :msg<br />Type: :type<br />Code: :code<br />User: :uid', array(':msg' => $returned_value['error']['message'], 
	    'type' => $returned_value['error']['type'], ':code' => $returned_value['error']['code']), WATCHDOG_ERROR);
	  }
  }
  
  //start process of authorizing and getting access tokens from facebook
  $megapost_facebook_callback_url = url('megapost_facebook_callback', array('absolute' => TRUE));
  $query = array(
    'client_id' => $megapost_facebook_app_id,
	  'redirect_uri' => $megapost_facebook_callback_url,
	  'scope' => 'publish_stream,manage_pages',
  );
  $facebook_url = url("https://www.facebook.com/dialog/oauth", array('query' => $query));
  drupal_goto($facebook_url);
  //facebook should now be redirected to /megabost_facebook_callback with $_REQUEST['code']. This is handled in megapost_facebook_callback()
  */
}

function megapost_facebook_callback_func() {

  $code = $_REQUEST['code'];
  $app_id = variable_get('megapost_facebook_app_id', NULL);
  $app_secret = variable_get('megapost_facebook_app_secret', NULL);
  $query = array(
    'client_id' => $app_id,
	  'client_secret' => $app_secret,
	  //why do we set this function as the redirect_uri? Does that form a loop?
	  'redirect_uri' => url('megapost_facebook_callback', array('absolute' => TRUE)),
	  'code' => $code,
  );
  $url = url("https://graph.facebook.com/oauth/access_token", array('query' => $query));
  $request_value = drupal_http_request($url);
  parse_str($request_value->data, $return_value);

  //if facebook returns our request for the access token, save it as megapost_facebook_user_token and use it to get the page token
  if ($request_value->code == 200) {
	  $access_token = $return_value['access_token'];
	  variable_set('megapost_facebook_user_token', $access_token);
    $f_page_id_list = array();
    $request_user_details = drupal_http_request('https://graph.facebook.com/me?access_token=' . $access_token);
    $returned_user_values = json_decode($request_user_details->data, TRUE);
    $request_account_details = drupal_http_request('https://graph.facebook.com/' . $returned_user_values['id'] . '/accounts?access_token=' . $access_token);
    $returned_account_values = json_decode($request_account_details->data, TRUE);
    foreach ($returned_account_values['data'] as $f_page) {
	    $f_page_id_list[] = $f_page['id'];
	    if ($f_page['id'] == variable_get('megapost_facebook_pageid', NULL)) {
	      variable_set('megapost_facebook_page_token', $f_page['access_token']);
		    drupal_set_message(t('Configuration saved.'), 'status');
	    }
	  }
    
    if (!in_array(variable_get('megapost_facebook_pageid', NULL), $f_page_id_list)) {
	    drupal_set_message(t('It seems you are not the admin of !page. To post to this page, you need to have the administrative rights. 
	    Kindly contact the page administrator for permissions.', array('!page' => l(variable_get('megapost_facebook_page_url', NULL), variable_get('megapost_facebook_page_url', NULL)))), 'warning');
	    variable_del('megapost_facebook_page_url');	  
	  }
	}
	else {
	$returned_value = json_decode($request_value->data, TRUE);
	  watchdog('megapost', 'Message: :msg<br />Type: :type<br />Code: :code<br />User: :uid', array(':msg' => $return_value['error']['message'], 'type' => $return_value['error']['type'], ':code' => $return_value['error']['code']), WATCHDOG_ERROR);
	}
	
  drupal_goto('/admin/config/system/megapost');
}


/**
 * Implements hook_node_insert().
 * 
 */

/*function megapost_node_insert($node) {
//  $node = node_load($node_incomplete->nid);
  if(!empty($node->field_actions['und'])){
    foreach($node->field_actions['und'] as $val){
      if($val['tid'] == 1){
        //this means we are posting to facebook
        $page_id = variable_get('megapost_facebook_pageid', NULL);
        $url = "https://graph.facebook.com/$page_id/feed";
        $pic = NULL;
        $data = array(
          'access_token' => variable_get('megapost_facebook_page_token', NULL),
          'message' => $node->body['und'][0]['value'],
          'picture' => $pic,
          'link' => NULL,
          'name' => NULL,
          'caption' => NULL,
          'description' => NULL,
        );
        
        //$ch = curl_init();
        //curl_setopt($ch, CURLOPT_URL, $url);
        //curl_setopt($ch, CURLOPT_HEADER, false);
        //curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        //curl_setopt($ch, CURLOPT_POST, true);
        //curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        //$response = curl_exec($ch);
        //$content = json_decode($response, TRUE);
        //if (is_array($content) && array_key_exists('error', $content)){
        //  watchdog('megapost', 'Message: :msg<br />Type: :type<br />Code: :code<br />User: :uid', array(':msg' => $content['error']['message'], 'type' => $content['error']['type'], ':code' => $content['error']['code']), WATCHDOG_ERROR);
        //}

        $response = drupal_http_request($url, array('data' => http_build_query($data), 'method' => 'POST'));
        if ($response->code != 200) {
          $content = json_decode($response->data, TRUE);
          watchdog('megapost', 'Message: :msg<br />Type: :type<br />Code: :code<br />User: :uid', array(':msg' => $content['error']['message'], 'type' => $content['error']['type'], ':code' => $content['error']['code']), WATCHDOG_ERROR);
        }
 

        //return FALSE;
      }
    }
  }
}*/


/*function megapost_node_delete($node) {
  $testvar = 1;
  if(!empty($node->field_actions['und'])){
    foreach($node->field_actions['und'] as $val){
      if($val['tid'] == 1){
        //this means we posted to facebook
        //I need to save facebook object id in the node to use here
        $oid =
        $url = "https://graph.facebook.com/$oid";

        $data = array(
          'access_token' => variable_get('megapost_facebook_page_token', NULL),
          );
        $response = drupal_http_request($url, array('data' => http_build_query($data), 'method' => 'DELETE'));
        if ($response->code != 200) {
          $content = json_decode($response->data, TRUE);
          watchdog('megapost', 'Message: :msg<br />Type: :type<br />Code: :code<br />User: :uid', array(':msg' => $content['error']['message'], 'type' => $content['error']['type'], ':code' => $content['error']['code']), WATCHDOG_ERROR);
        }


        //return FALSE;
      }
    }
  }
}*/
